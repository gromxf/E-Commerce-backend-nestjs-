// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user") // user / admin
  orders    Order[]
  createdAt DateTime @default(now())

  @@map("users")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]

  @@map("categories")
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  Int
  images      ProductImage[]
  orderItems  OrderItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("product_images")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  status    OrderStatus @default(PENDING)
  total     Float
  items     OrderItem[]
  createdAt DateTime    @default(now())

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float

  @@map("order_items")
}
